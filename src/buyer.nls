extensions [table]

breed [buyers buyer]

; --- Buyer variables ---
;
; 1) beliefs
; 2) desire
; 3) intention
; 4) private-value: the agen't private value for a good (currently there is only 1 good)
; 5) outgoing-messages
; 6) incomming-messages
buyers-own [beliefs desire intention money private-value outgoing-messages incoming-messages wishlist]

to setup-buyers
  let num-buyers 5
  create-buyers num-buyers [
    setxy 4 + min-pxcor + who * 3 min-pycor + 3
    set heading 90
    set color red
    set shape "person"
    
    ; Initial money is random
    set money (random 100)
    
    ; Draw the buyer's private-values from a normal distribution 
    set private-value (round (random-normal 20 5))
    set label private-value

		set wishlist table:make
		table:put wishlist "wood" random 3 + 1

		set beliefs table:make
    
    ; Store the initial belifs
    table:put beliefs "money" money
    table:put beliefs "value" private-value
		table:put beliefs "wishlist" wishlist
		table:put beliefs "bought good" false

    set desire "minimize-price"
    set intention []
    set incoming-messages (list)
    set outgoing-messages (list)

		
  ]
end

to update-buyer-beliefs
  ask buyers [
    ;; Look how much money we have left
    table:put beliefs "money" money
  
    foreach incoming-messages [
      ;; Message with base prices of all goods. Format is:
      ;; ["price list" [p1 p2 p3 ...]]
      ifelse first ? = "price list" [
        table:put beliefs "price list" item 1 ?
      ][
      ;; Message about what good is being sold. Format is: 
      ;; ["auction" good-turtle-id current-bid]
      ifelse first ? = "auction" [
        ;; print ?
        table:put beliefs "auctioned good" item 1 ?
        table:put beliefs "current bid" item 2 ?
      ][
      ;; Message containing the current highest bid. Format is:
      ;; ["current bid" buyer-id price]
      ifelse first ? = "current bid" [
        table:put beliefs "current buyer" item 1 ?
        table:put beliefs "current bid" item 2 ?
      ][
      ;; Auction for the current good is closed 
      ifelse first ? = "close auction" [
        table:remove beliefs "auctioned good"
        table:remove beliefs "current bid"
      ][
			;; Message announcing sale
			;; ["deal" buyer_id price good_id auctioneer_id]
			ifelse first ? = "deal" and item 1 ? = who [
				table:put beliefs "money" (table:get beliefs "money" - item 2 ?)
				let gtype ""
				ask good item 3 ? [ set gtype good-type ] 
				table:put wishlist gtype (table:get wishlist gtype - 1)
				table:put beliefs "bought good" (list item 3 ? item 4 ? item 2 ?)
			][]]]]]
    ]
    
    set incoming-messages (list)
  ]
end


to update-buyer-desires
	ask buyers [
		let done  true
		foreach table:keys wishlist [ if table:get wishlist ? > 0 [ set done false ]]
		if done [ set desire "shutdown" ]
	]
end

to update-buyer-intentions
  ask buyers [
    ;; Determine how much we want to bid on the current auction
    let bid false
    if table:has-key? beliefs "auctioned good" [
			let goodtype ""
			ask good table:get beliefs "auctioned good" [ set goodtype good-type]
      if not (table:has-key? beliefs "current buyer") or not ((table:get beliefs "current buyer") = who)
				 		 	and table:get wishlist goodtype > 0 [
        ;;print (table:get beliefs "auctioned good")
        ;;print (table:get beliefs "current bid")
        set bid (basic-bid-strategie (table:get beliefs "auctioned good") (table:get beliefs "current bid"))
      ]
    ]

		ifelse is-list? table:get beliefs "bought good" [
			set intention  fput "store good" table:get beliefs "bought good"
			table:put beliefs "bought good" false
		][
    ;; Bidding intentions contains the bid price
    ifelse is-number? bid [
      set intention (list "bid" bid)
    ][
    ;; Intention to pass the current round
    ifelse bid = false and (table:has-key? beliefs "auctioned good") [
      set intention ["pass"]
    ][]]]
  ]
end

to execute-buyer-actions
  ask buyers with [not empty? intention] [
    ;; Bidding action
    ifelse first intention = "bid" [
      ;; TODO: support multiple auctioneers
      ;;print (list "Bidding: " (item 1 intention))
      let buyer-id who
      set outgoing-messages fput (list "bid" buyer-id (item 1 intention))  outgoing-messages
    ][
    ;; Pass
    ifelse first intention = "pass" [
      ;;print (list "Buyer " who " passing")
    ][
		ifelse first intention = "store good" [
			let xc xcor
			let yc ycor
			
			ask good item 1 intention [ setxy xc yc - 2 ]
			;; message to selling auctioneer ["deal" auctioneer_id good_id price ]
			set outgoing-messages fput (list "deal" item 2 intention item 1 intention item 3 intention) outgoing-messages
		][]]]
  ]
end

;--- Send messages ---
to send-buyer-messages
  ask buyers [
    let msgs outgoing-messages
    ask auctioneers [
      (foreach msgs [
         set incoming-messages fput ? incoming-messages 
      ])
    ]
   set outgoing-messages (list)
  ]
end

;;;;;;;;;;;;;;;;;;;;;
;; BUYER STRATEGIES
;;;;;;;;;;;;;;;;;;;;;

; --- Basic bidding strategy ---
;
; Place bid if private-value is higher than current-bid. Currently alays
; bids when private value is larger than current-bid. Should be extended.
to-report basic-bid-strategie [good-id current-bid]
  if private-value > current-bid [
    report current-bid + 1
  ]
  report false
end