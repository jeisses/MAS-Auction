breed [auctioneers auctioneer]

; --- Auctioneer variables ---
;
auctioneers-own [beliefs desire intention incoming-messages outgoing-messages]

; --- Global variables ---
; * Position of patch where auctioned good recides
globals [auction-xcor auction-ycor]

; --- Setup auctioneers ---
to setup-auctioneers  
  let num-auctioneers 1
  create-auctioneers num-auctioneers [
    setxy 0 max-pycor - 3
    set heading 180
    set color yellow
    set shape "person business"
    
    ;; Setup the patch where the auctioned good is
    set auction-xcor xcor - 1
    set auction-ycor ycor
    ask patch auction-xcor auction-ycor [ set pcolor gray ]
    
    ;; Store initial values of auctioneer
    set beliefs table:make
    let all-goods sort-by < [who] of goods
    let price-list [good-price] of goods
    let current-good-price 0
    ask good item 0 all-goods [set current-good-price good-price]
    
    ;; Setup beliefs table
    ;; The auctioneer starts with beliefs about the available goods
    table:put beliefs "all goods" all-goods       ; list of unsold goods
    table:put beliefs "price list" price-list
    table:put beliefs "current good" false
    table:put beliefs "current price" -1
    table:put beliefs "published pricelist" false ; remember if we already published prices
    
    set outgoing-messages (list)
    set incoming-messages (list)
    set intention ""
    set desire "maximize price"
  ]
end

; --- Update the auctioneers' beliefs ---
to update-auctioneers-beliefs
  ; type of item
  ; number of items
  ; prices for each type of item
  ask auctioneers [
    ;; If last intention was publish prices, add this to beliefs
    if intention = "publish pricelist" [ table:put beliefs "published pricelist" true ]

    ;; Update beliefs about the good being auctioned
    if table:get beliefs "current good" = false and length table:get beliefs "all goods" > 0 [
      let cur-good false
      ask goods-at -1 0 [ set cur-good who ]
      table:put beliefs "current good" cur-good
    ]
  ] 
end

; --- Update the auctioneers' desires ---
to update-auctioneers-desires
  ask auctioneers [
    ;; Shutdown if all is sold
    if length table:get beliefs "all goods" = 0 [ set desire "shutdown" ]
  ]
end

; --- Update the auctioneers' intentions ---
to update-auctioneers-intentions
  ask auctioneers [
    let num-goods length table:get beliefs "all goods"
    
    ; If the desire is to auction goods  
    if desire = "maximize price" [
      ; Check if we already published prices
      ifelse table:get beliefs "published pricelist" = false [
        set intention "publish pricelist"
      ][
      ; If there's goods available then prepare them
      ifelse num-goods > 0 and count (goods-at -1 0) = 0 [
        set intention "fetch good"
      ][
      ; If there's a good ready we can auction it
      ifelse is-number? (table:get beliefs "current good") [
        set intention "auction good"
      ][]]]
    ]
    
    ; Shutdown is the desire when there are no more goods
    if desire = "shutdown" [
      set intention "close auction"
    ]
  ]
end

; --- Execute the auctioneers' actions
to execute-auctioneers-actions
  ask auctioneers [
    ifelse intention = "close auction" [
       print "Closing auction"
    ][
    ifelse intention = "publish pricelist" [
      set outgoing-messages (list (list  "price list" (table:get beliefs "price list")))
    ][
    ifelse intention = "fetch good" [
      ask one-of goods with [sold = false] [
        set xcor auction-xcor
        set ycor auction-ycor
      ]
    ][
    ifelse intention = "auction good" [
      let current-good-price 0
      ask goods-at -1 0 [set current-good-price good-price]
      table:put beliefs "current price" current-good-price
      set outgoing-messages (list (list "auction" (table:get beliefs "current good") (table:get beliefs "current price")))
    ][]]]]
  ]
end

;--- Send messages ---
to send-auctioneers-messages
  ask auctioneers [
    let msgs outgoing-messages
    ask buyers [
      (foreach msgs [
         set incoming-messages fput ? incoming-messages 
      ])
    ]
   set outgoing-messages (list)
  ]
end
