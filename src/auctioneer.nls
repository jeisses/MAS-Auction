breed [auctioneers auctioneer]

; --- Auctioneer variables ---
;
auctioneers-own [beliefs desire intention incoming-messages outgoing-messages nr-of-auctioneers ]

; --- Global variables ---
; * Position of patch where auctioned good recides
globals [auction-xcor auction-ycor]

; --- Setup auctioneers ---
to setup-auctioneers
	let xcoords [ -4 -2 0 2 4   ]
  let num-auctioneers 5
  create-auctioneers num-auctioneers [
		set nr-of-auctioneers num-auctioneers
		let xc first xcoords
    setxy xc max-pycor - 4
		set xcoords remove-item 0 xcoords
		set heading 180
    set color green
    set shape "person business"
    
    ;; Store initial values of auctioneer
    set beliefs table:make
    let goods_id who - 5
		let price [good-price] of goods
   
    ;; Setup beliefs table
    ;; The auctioneer starts with beliefs about the available goods
    table:put beliefs "goods-id" goods_id       ; good id of stack of unsold goods
    table:put beliefs "current price" price
    table:put beliefs "num bids" 0                ; count number of bids this round
    table:put beliefs "num passes" 0              ; count number of passes this round
    table:put beliefs "published price" false ; remember if we already published prices
    table:put beliefs "published bid" true        ; remember if we communicated the highest bid
    table:put beliefs "bids" (list)
    table:put beliefs "profit" 0                  ; profit of the auctioneer
    table:put beliefs "income threshold" (count buyers * 20 + 50)     ; the amount of money the auctioneer wants to yield at least
    set outgoing-messages (list)
    set incoming-messages (list)
    set intention ""
    set desire "maximize price"
  ]
end

; --- Update the auctioneers' beliefs ---
to update-auctioneers-beliefs
  ask auctioneers [
    ;; Set outgoing-messages to an empty list
    set outgoing-messages (list)
    
    ;; If last intention was publish prices, add this to beliefs
    if intention = "publish price" [ table:put beliefs "published price" true ]
    if intention = "publish bid" [ table:put beliefs "published bid" true ]
    
    ;; Last intention was to remove a good
    if intention = "remove good" [
      ask good table:get beliefs "goods-id" [ set amount amount - 1]
      table:put beliefs "current price" -1
    ] 
    
    if intention = "sell item" [
      table:put beliefs "current price" [good-price] of good table:get beliefs "all-goods"
      table:put beliefs "num bids" 0                
      table:put beliefs "published pricelist" false 
      table:put beliefs "published bid" true        
      table:put beliefs "bids" (list)   
    ]

    table:put beliefs "num bids" 0
    table:put beliefs "num passes" 0
    
    ;; Parse incomming messages
    foreach incoming-messages [
      ;; Bid message. Format is:
      ;; ["bid" auctioneer-id buyer-id price]
      ifelse first ? = "bid" and item 1 ? = who [
        table:put beliefs "bids" (fput (list (item 2 ?) (item 3 ?))  (table:get beliefs "bids"))
        table:put beliefs "published bid" false
        sort-bids
        table:put beliefs "num bids" table:get beliefs "num bids" + 1
      ][
      ;; keep track of number of passes
      ifelse first ? = "pass" and item 1 ? = who [
        table:put beliefs "num passes" table:get beliefs "num passes" + 1
      ][
			;; message to selling auctioneer ["deal" auctioneer_id good_id price ]			;; 
			ifelse first ? = "deal" and item 1 ? = who [
				ask good  table:get beliefs "goods-id" [ set amount amount - 1 ]
				let price 0
				ask good table:get beliefs "goods-id" [ if not sold [set price good-price ]]
				table:put beliefs "price" price
    		table:put beliefs "current price" -1
    		table:put beliefs "num bids" 0                
    		table:put beliefs "published price" false 
    		table:put beliefs "published bid" true        
    		table:put beliefs "bids" (list)
			][]]]
      set incoming-messages (list)
    ]
		if table:get beliefs "num bids" > 0 [ table:put beliefs "current price" item 1 first table:get beliefs "bids"]
  ] 
end

; --- Update the auctioneers' desires ---
to update-auctioneers-desires
  ask auctioneers [
    ;; Shutdown if all is sold
		if [amount] of good table:get beliefs "goods-id" < 1 [ set desire "shutdown" ]
  ]
end

; --- Update the auctioneers' intentions ---
to update-auctioneers-intentions
  ask auctioneers [
    let num-goods [amount] of good table:get beliefs "goods-id"
    
    ; If the desire is to auction goods  
    if desire = "maximize price" [
      ; Check if we already published prices
      ifelse table:get beliefs "published price" = false and num-goods > 0 [
        set intention "publish price"
      ][
      ; After receiving bids, publish the highest bid
      ifelse table:get beliefs "published bid" = false [
        set intention "publish bid"
      ][
      ; If there are no more bids sell item to highest bidder
      ifelse not empty? (table:get beliefs "bids") and table:get beliefs "num bids" = 0 [
        set intention "sell item"
      ][
      ; If there are no bids after auctioning the good, the item should be removed from auction
      ifelse intention = "auction good" and table:get beliefs "num passes" = count buyers [
        set intention "remove good"
      ][
      ; If there's a good ready we can auction it
      set intention "auction good"
      ]]]]
    ]
    
    ; Shutdown is the desire when there are no more goods
    if desire = "shutdown" [
      set intention "close auction"
    ]
  ]
end

; --- Execute the auctioneers' actions ---
to execute-auctioneers-actions
  ask auctioneers [
    ifelse intention = "close auction" [
    ][
    ifelse intention = "publish price" [
      set outgoing-messages (list (list  "price" who (table:get beliefs "current price")))
    ][
    ifelse intention = "publish bid" [
      let highest-bid first table:get beliefs "bids"
      set outgoing-messages (list (list "current bid" who first highest-bid (item 1 highest-bid)))
    ][
    ifelse intention = "auction good" [
      let current-good-price [good-price] of good table:get beliefs "goods-id"
      table:put beliefs "current price" current-good-price
      set outgoing-messages (list (list "auction" who ([good-type] of good table:get beliefs "goods-id") (table:get beliefs "current price")))
    ][
		ifelse intention = "sell item" [
			let highest first table:get beliefs "bids"
			let buyer_id item 0 highest
			let price item 1 highest
			table:put beliefs "profit" table:get beliefs "profit" + (price - table:get beliefs "current price") 
			set outgoing-messages (list (list "deal" buyer_id price [good-type] of good table:get beliefs "goods-id" who))
		][
    ifelse intention = "remove good" [
      set outgoing-messages (list (list "close auction"))
    ][]]]]]]
  ]
end

; --- Sort bids ---
;
; Helper function. Sort the bids descending by price.
to sort-bids
  table:put beliefs "bids" (sort-by [item 1 ?1 > item 1 ?2] (table:get beliefs "bids"))
end

; --- Send messages ---
to send-auctioneers-messages
  ask auctioneers [
    let msgs outgoing-messages
    ask buyers [
      (foreach msgs [
         set incoming-messages fput ? incoming-messages 
      ])
    ]
  ]
end
